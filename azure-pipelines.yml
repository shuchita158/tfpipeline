# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest
stages:
- stage: TerraformPlan
  variables: 
    ENV: 'Dev' 
  jobs:
  - job: PlanTFInfra
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      inputs:
        terraformVersion: '0.15.0'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'shuchita-payg'
        backendAzureRmResourceGroupName: 'tfstate-rg'
        backendAzureRmStorageAccountName: 'storagetfstatetest'
        backendAzureRmContainerName: 'tfstatecontainer'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'shuchita-payg'
  
- stage: TerraformApplydev
  variables:
    ENV: 'Dev'
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation  
    pool: server    
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:   
    - task: ManualValidation@0
      timeoutInMinutes: 1440 # task times out in 1 day
      inputs:
          notifyUsers: |
              taneja_shuchita@hotmail.com
          instructions: 'Please validate the build configuration and resume'
          onTimeout: 'resume'
  
  - job: ApplyTF
    steps:
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'shuchita-payg'
        backendAzureRmResourceGroupName: 'tfstate-rg'
        backendAzureRmStorageAccountName: 'storagetfstatetest'
        backendAzureRmContainerName: 'tfstatecontainer'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: 'shuchita-payg'

